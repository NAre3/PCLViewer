#include "pclviewer.h"
#include "ui_pclviewer.h"

PCLViewer::PCLViewer(QWidget* parent) :
    QMainWindow(parent),
    ui(new Ui::PCLViewer)
{
    ui->setupUi(this);
    this->setWindowTitle("PCL viewer");

    // Setup the cloud pointer
    cloud.reset(new PointCloudT);
    viewer.reset(new pcl::visualization::PCLVisualizer("viewer", false));


    filename = QFileDialog::getOpenFileName();
    pcl::io::loadPCDFile(filename.toStdString(), *cloud);

    // Set up the QVTK window
    pcl::visualization::PointCloudColorHandlerCustom<PointT>single_color(red, green, blue);
    viewer->addPointCloud<PointT>(cloud, single_color, "cloud");
    viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 2, "cloud");
    ui->qvtkWidget->SetRenderWindow(viewer->getRenderWindow());
    viewer->setupInteractor(ui->qvtkWidget->GetInteractor(), ui->qvtkWidget->GetRenderWindow());
    ui->qvtkWidget->update();

    // Connect "random" button and the function
    connect(ui->pushButton_random, SIGNAL(clicked()), this, SLOT(randomButtonPressed()));

    // Connect R,G,B sliders and their functions
    connect(ui->horizontalSlider_R, SIGNAL(valueChanged(int)), this, SLOT(redSliderValueChanged(int)));
    connect(ui->horizontalSlider_G, SIGNAL(valueChanged(int)), this, SLOT(greenSliderValueChanged(int)));
    connect(ui->horizontalSlider_B, SIGNAL(valueChanged(int)), this, SLOT(blueSliderValueChanged(int)));
    connect(ui->horizontalSlider_R, SIGNAL(sliderReleased()), this, SLOT(RGBsliderReleased()));
    connect(ui->horizontalSlider_G, SIGNAL(sliderReleased()), this, SLOT(RGBsliderReleased()));
    connect(ui->horizontalSlider_B, SIGNAL(sliderReleased()), this, SLOT(RGBsliderReleased()));

    // Connect point size slider
    connect(ui->horizontalSlider_p, SIGNAL(valueChanged(int)), this, SLOT(pSliderValueChanged(int)));

    connect(ui->openfile, SIGNAL(triggered()), this, SLOT(OpenFile()));
}

void
PCLViewer::randomButtonPressed()
{
    printf("Random button was pressed\n");

    // Set the new color
    for (auto& point : *cloud)
    {
        point.r = 255 * (1024 * rand() / (RAND_MAX + 1.0f));
        point.g = 255 * (1024 * rand() / (RAND_MAX + 1.0f));
        point.b = 255 * (1024 * rand() / (RAND_MAX + 1.0f));
    }

    viewer->updatePointCloud(cloud, "cloud");
    ui->qvtkWidget->update();
}

void
PCLViewer::RGBsliderReleased()
{
    // Set the new color
    for (auto& point : *cloud)
    {
        point.r = red;
        point.g = green;
        point.b = blue;
    }
    viewer->updatePointCloud(cloud, "cloud");
    ui->qvtkWidget->update();
}

void
PCLViewer::pSliderValueChanged(int value)
{
    viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, value, "cloud");
    ui->qvtkWidget->update();
}

void
PCLViewer::redSliderValueChanged(int value)
{
    red = value;
    printf("redSliderValueChanged: [%d|%d|%d]\n", red, green, blue);
}

void
PCLViewer::greenSliderValueChanged(int value)
{
    green = value;
    printf("greenSliderValueChanged: [%d|%d|%d]\n", red, green, blue);
}

void
PCLViewer::blueSliderValueChanged(int value)
{
    blue = value;
    printf("blueSliderValueChanged: [%d|%d|%d]\n", red, green, blue);
}


void
PCLViewer::OpenFile()
{
    filename = QFileDialog::getOpenFileName();
    pcl::io::loadPCDFile(filename.toStdString(), *cloud);
    viewer->updatePointCloud(cloud, "cloud");
    ui->qvtkWidget->update();
}


PCLViewer::~PCLViewer()
{
    delete ui;
}